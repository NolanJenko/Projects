import pygame


class Board:
    def __init__(self):
        self.size = 8
        self.coordinates_b = []
        self.coordinates_w = []

    # creates a list of all possible coordinates for pieces and their respective tile
    def coord(self):
        for i in range(self.size):
            for j in range(self.size):

                if (i % 2) == 0:
                    if(j % 2) == 0:
                        self.coordinates_b.append((i *75, j*75))
                    else:
                        self.coordinates_w.append((i * 75, j *75))

                else:
                    if (j % 2) != 0:
                        self.coordinates_b.append((i*75, j*75))
                    else:
                        self.coordinates_w.append((i*75, j*75))


class Pieces:
    def __init__(self):
        self.w = []
        self.b = []
        self.w_start = 525
        self.b_start = 0
        self.w_size = len(self.w)
        self.b_size = len(self.b)


    # method that loads in all game pieces from png files then resizes them
    def load_pieces(self):
        w_king = pygame.image.load('white_king.png')
        w_queen = pygame.image.load('white_queen.png')
        w_rook = pygame.image.load('white_rook.png')
        w_bishop = pygame.image.load('white_bishop.png')
        w_knight = pygame.image.load('white_knight.png')
        w_pawn = pygame.image.load('white_pawn.png')
        self.w_pawn = pygame.transform.scale(w_pawn, (75,75))
        self.w_king = pygame.transform.scale(w_king, (75,75))
        self.w_queen = pygame.transform.scale(w_queen, (75,75))
        self.w_rook = pygame.transform.scale(w_rook, (75,75))
        self.w_bishop = pygame.transform.scale(w_bishop, (75,75))
        self.w_knight = pygame.transform.scale(w_knight, (75,75))
        b_king = pygame.image.load('black_king.png')
        b_queen = pygame.image.load('black_queen.png')
        b_rook = pygame.image.load('black_rook.png')
        b_bishop = pygame.image.load('black_bishop.png')
        b_knight = pygame.image.load('black_knight.png')
        b_pawn = pygame.image.load('black_pawn.png')
        self.b_pawn = pygame.transform.scale(b_pawn, (75, 75))
        self.b_king = pygame.transform.scale(b_king, (75, 75))
        self.b_queen = pygame.transform.scale(b_queen, (75, 75))
        self.b_rook = pygame.transform.scale(b_rook, (75, 75))
        self.b_bishop = pygame.transform.scale(b_bishop, (75, 75))
        self.b_knight = pygame.transform.scale(b_knight, (75, 75))
        for i in range(8):
            self.w.append([0, [i*75, 450]])
            self.b.append([0,(i * 75, 75)])
            if i == 0 or i == 7:
                self.w.append([1, [i*75, 525]])
                self.b.append([1, [i*75, 0]])
            elif i == 1 or i == 6:
                self.w.append([2, [i*75, 525]])
                self.b.append([2, [i * 75, 0]])
            elif i == 2 or i == 5:
                self.w.append([3, [i * 75, 535]])
                self.b.append([3, [i * 75, 0]])
            elif i==3:
                self.w.append([4, [i*75, 525]])
                self.b.append([4, [i * 75, 0]])
            elif i == 4:
                self.w.append([5, [i * 75, 525]])
                self.b.append([5, [i * 75, 0]])

    def get_piece(self, position):
        for i in self.w:
            if position[0] <= 75 +i[1][0] and position[1] <= 75+ i[1][1]:
                if position[0] >= i[1][0] and position[1] >= i[1][1]:
                    return i
        for j in self.b:
            if position[0] <= 75 +j[1][0] and position[1] <= 75+j[1][1]:
                if position[0] >=j[1][0] and position[1] >= j[1][1]:
                    return j
        return None

    def move(self, p, position):
        if p[0] == 0:
            self.b[0][1] = (self.b[0][1][0], self.b[0][1][1]+75)
            self.take_piece(self.b[0][1])

    def take_piece(self, p):
        if p in self.w:
            self.w.remove(p)
            print(self.w)







class Main:
    def __init__(self):
        self.board = Board()
        self.screen= pygame.display.set_mode((600, 600))
        self.pieces = Pieces()
        self.on__init__()


    def on__init__(self):
        self.pieces.load_pieces()
        self.board.coord()
        self.loop()

    def draw(self):
        for i in range(32):
            pygame.draw.rect(self.screen, (51,102,0), (self.board.coordinates_w[i][0],self.board.coordinates_w[i][1],75,75))
            pygame.draw.rect(self.screen, (255, 255, 255),(self.board.coordinates_b[i][0], self.board.coordinates_b[i][1], 75, 75))
        for i in range(16):
            if self.pieces.w[i][0] == 0:
                self.screen.blit(self.pieces.w_pawn, self.pieces.w[i][1])
                self.screen.blit(self.pieces.b_pawn, self.pieces.b[i][1])
            elif self.pieces.w[i][0] == 1:
                self.screen.blit(self.pieces.w_rook, self.pieces.w[i][1])
                self.screen.blit(self.pieces.b_rook, self.pieces.b[i][1])
            elif self.pieces.w[i][0] == 2:
                self.screen.blit(self.pieces.w_knight, self.pieces.w[i][1])
                self.screen.blit(self.pieces.b_knight, self.pieces.b[i][1])
            elif self.pieces.w[i][0] == 3:
                self.screen.blit(self.pieces.w_bishop, self.pieces.w[i][1])
                self.screen.blit(self.pieces.b_bishop, self.pieces.b[i][1])
            elif self.pieces.w[i][0] == 4:
                self.screen.blit(self.pieces.w_queen, self.pieces.w[i][1])
                self.screen.blit(self.pieces.b_queen, self.pieces.b[i][1])
            if self.pieces.w[i][0] == 5:
                self.screen.blit(self.pieces.w_king, self.pieces.w[i][1])
                self.screen.blit(self.pieces.b_king, self.pieces.b[i][1])



    def loop(self):
        pygame.init()

        WHITE=(255,255,255)
        BLUE=(0,0,255)

        self.screen.fill(WHITE)
        piece = None
        running = True
        while running:
            for event in pygame.event.get():
                if event.type== pygame.QUIT:
                    running = False
                if event.type == pygame.MOUSEBUTTONDOWN:
                    pos = pygame.mouse.get_pos()
                    piece = self.pieces.get_piece(pos)
                    if piece is not None:
                        print(piece)
                        if event.type == pygame.MOUSEBUTTONDOWN:
                            pos = pygame.mouse.get_pos()
                            self.pieces.move(piece, pos)
            self.draw()

            pygame.display.update()


Main()

            
