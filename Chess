import pygame


class Space:
    def __init__(self, color):

        self.color = color
        self.piece = None

    def add_piece(self, piece):
        self.piece = piece

    def get_piece(self):
        return self.piece


class Board:
    def __init__(self):
        self.board = [[] for x in range(8)]

    def create_board(self):
        for i in range(8):
            for j in range(8):
                if (i % 2) == 0:
                    if(j % 2) == 0:
                        self.board[j] += [Space('white')]
                    else:
                        self.board[j] += [Space('black')]

                else:
                    if (j % 2) != 0:
                        self.board[j] += [Space('white')]
                    else:
                        self.board[j] += [Space('black')]
        for i in range(8):
            self.board[1][i].add_piece(Pawn(True))
            self.board[6][i].add_piece(Pawn(False))
            if i == 0 or i == 7:
                self.board[0][i].add_piece(Rook(True))
                self.board[7][i].add_piece(Rook(False))
            if i == 1 or i == 6:
                self.board[0][i].add_piece(Knight(True))
                self.board[7][i].add_piece(Knight(False))
            if i == 2 or i == 5:
                self.board[0][i].add_piece(Bishop(True))
                self.board[7][i].add_piece(Bishop(False))
            if i == 3:
                self.board[0][i].add_piece(Queen(True))
                self.board[7][i].add_piece(Queen(False))
            if i == 4:
                self.board[0][i].add_piece(King(True))
                self.board[7][i].add_piece(King(False))

    def return_board(self):
        return self.board


class Piece:
    def __init__(self, color):
        self.white = color

    def is_white(self):
        return self.white


class King(Piece):
    def image(self):
        w_king = pygame.image.load('white_king.png')
        return pygame.transform.scale(w_king, (75,75))
    def move(self):
        return 1


class Queen(Piece):
    def image(self):
        w_queen = pygame.image.load('white_queen.png')
        return pygame.transform.scale(w_queen, (75,75))
    def move(self):
        return 1


class Rook(Piece):
    def image(self):
        w_rook = pygame.image.load('white_rook.png')
        return pygame.transform.scale(w_rook, (75,75))
    def move(self):
        return 1


class Bishop(Piece):
    def image(self):
        w_bishop = pygame.image.load('white_bishop.png')
        return pygame.transform.scale(w_bishop, (75,75))

    def move(self):
        return 1


class Knight(Piece):
    def image(self):
        w_knight = pygame.image.load('white_knight.png')
        return pygame.transform.scale(w_knight, (75,75))

    def move(self):
        return 1


class Pawn(Piece):
    def image(self):
        w_pawn = pygame.image.load('white_pawn.png')
        return pygame.transform.scale(w_pawn, (75, 75))

    def move(self):
        return 1


class Main:
    def __init__(self):
        self.board = Board()
        self.board.create_board()
        self.b = self.board.return_board()
        self.screen = pygame.display.set_mode((600, 600))
        self.loop()

    def draw(self):
        for i in range(8):
            for j in range(8):
                if self.b[i][j].color == 'white':
                    pygame.draw.rect(self.screen, (51, 102, 0), (j * 75, i*75, 75, 75))
                    if self.b[i][j].piece is not None:
                        self.screen.blit(self.b[i][j].piece.image(), (j *75, i*75))
                else:
                    pygame.draw.rect(self.screen, (255, 255, 255), (j * 75, i*75, 75, 75))
                    if self.b[i][j].piece is not None:
                        self.screen.blit(self.b[i][j].piece.image(), (j *75, i*75))


    def loop(self):
        pygame.init()
        turn  = 0
        WHITE=(255,255,255)
        selected = None

        self.screen.fill(WHITE)
        running = True
        while running:
            for event in pygame.event.get():
                if event.type== pygame.QUIT:
                    running = False
            self.draw()
            pygame.display.update()

Main()

            
